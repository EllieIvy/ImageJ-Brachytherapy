//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
// ImageJ Macro: Brachytherapy line source film analysis
//
// Ellie Ivy 18/06/2025
//
// Input: Scanned autoradiograph of Flexitron source along a straight source path (TIF File)
//
// Description
// User draws a line across the source path
// Macro plots a profile along this path, smooths the profile and plots the maxima
//
// Suggested Improvements
// Return results in table format, including 'dead space' and 'DP 1', etc.
// Return absolute position of dwells and distance between dwells
// Adapt this to specifically fit the oesophagus jig
// Test out particle detection as alternative method
//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------

// Ask user to select a file, open the file
 	path = File.openDialog("Choose a File"); 
	open(path)
	selectedImage = getImageID();
	selectImage(selectedImage);

// Get DPI from user
	dpi=NaN;
	while(isNaN(dpi) || dpi <= 0) {
    		dpi = getNumber("Enter scan DPI (dots per inch):", 300);
	}

// Set pixel size
	pix_size_mm = 25.4/dpi;

// Prompt user to daw a line profile through the source path, starting at the end of the catheter
	setTool("line");
	while (selectionType != 5) {	
	waitForUser("Draw a line through the centre of the source path, starting from the end of the applicator, then click OK to continue.");
	}

// Invert display so dwell positions appear as maxima
	run("Invert");

// Generate line profile
	profile = getProfile();

// Smooth line profile
	smoothedProfile = smoothProfile(profile, 5);

// Find line profile maxima
	maxLocs = Array.findMaxima(smoothedProfile, 800);
	Array.sort(maxLocs);

// Print and mark maxima
	getLine(x1, y1, x2, y2, lineWidth);
	dx = (x2 - x1) / profile.length;
	dy = (y2 - y1) / profile.length;
	
	makePoint(0, 0);

	Overlay.clear();

	for (i = 0; i < maxLocs.length; i++) {
    		x = maxLocs[i] * pix_size_mm;
    		print("Max " + (i + 1) + " = " + x + " mm");

    		px = x1 + dx * maxLocs[i];
    		py = y1 + dy * maxLocs[i];

    	makePoint(px, py, "small red cross");
   	Overlay.addSelection();
	}

//------------------------------------------------------------------------------------

// Smooth profile function - uses moving average
	function smoothProfile(profile, windowSize) {
    		half = floor(windowSize / 2);
    		smoothed = newArray(profile.length);

    	for (i = 0; i < profile.length; i++) {
        	sum = 0;
        	count = 0;

        	for (j = -half; j <= half; j++) {
            	index = i + j;
            	if (index >= 0 && index < profile.length) {
                	sum += profile[index];
                	count++;
            	}
        	}

        smoothed[i] = sum / count;
    }

    return smoothed;
}
